{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhard\\\\Downloads\\\\COVID-19_tracker_reactjs-master\\\\src\\\\components\\\\StateTable\\\\StateTable.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport styles from './StateTable.module.css';\nimport { fetchStates } from '../../api';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\n\nconst StateTable = country => {\n  const [fetchedState, setfetchedState] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setfetchedState(await fetchStates(country));\n    };\n\n    fetchAPI();\n    console.log(fetchedState);\n  }, [country]);\n  const StyledTableCell = withStyles(theme => ({\n    // table column\n    head: {\n      backgroundColor: theme.palette.common.black,\n      color: theme.palette.common.white\n    },\n    body: {\n      fontSize: 14\n    }\n  }))(TableCell);\n  const StyledTableRow = withStyles(theme => ({\n    // table row\n    root: {\n      '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover\n      }\n    }\n  }))(TableRow);\n  const useStyles = makeStyles({\n    table: {\n      minWidth: 100\n    }\n  });\n  const provinceData = fetchedState;\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, provinceData.length > 1 ? /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, \"Statewise Data for \", country.country) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 66\n    }\n  }, \"Statewise Data for \", country.country, \" is not Available\"), provinceData.length > 1 ? /*#__PURE__*/React.createElement(TableContainer, {\n    component: Paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    className: classes.table,\n    xs: 12,\n    md: 3,\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(StyledTableCell, {\n    width: \"100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 33\n    }\n  }, \"States\"), /*#__PURE__*/React.createElement(StyledTableCell, {\n    align: \"left\",\n    width: \"50\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 33\n    }\n  }, \"Confirmed\"), /*#__PURE__*/React.createElement(StyledTableCell, {\n    align: \"left\",\n    width: \"50\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 33\n    }\n  }, \"Active\"), /*#__PURE__*/React.createElement(StyledTableCell, {\n    align: \"left\",\n    width: \"50\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 33\n    }\n  }, \"Recovered\"), /*#__PURE__*/React.createElement(StyledTableCell, {\n    align: \"left\",\n    width: \"50\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 33\n    }\n  }, \"Deaths\"))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  }, provinceData.length > 1 ? provinceData.map(data => /*#__PURE__*/React.createElement(StyledTableRow, {\n    key: data.provinceState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(StyledTableCell, {\n    component: \"th\",\n    scope: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 37\n    }\n  }, data.provinceState), /*#__PURE__*/React.createElement(StyledTableCell, {\n    style: {\n      color: 'rgba(0, 139, 139, 0.8)'\n    },\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 37\n    }\n  }, data.confirmed), /*#__PURE__*/React.createElement(StyledTableCell, {\n    style: {\n      color: 'rgba(0, 0, 255, 0.8)'\n    },\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 37\n    }\n  }, data.active), /*#__PURE__*/React.createElement(StyledTableCell, {\n    style: {\n      color: 'rgba(0, 140, 0, 0.8)'\n    },\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 37\n    }\n  }, data.recovered), /*#__PURE__*/React.createElement(StyledTableCell, {\n    style: {\n      color: 'rgba(255, 0, 0, 0.8)'\n    },\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 37\n    }\n  }, data.deaths))) : 'Statewise Data for this Country is not Available.'))) : null);\n};\n\nexport default StateTable;","map":{"version":3,"sources":["C:/Users/bhard/Downloads/COVID-19_tracker_reactjs-master/src/components/StateTable/StateTable.jsx"],"names":["React","useState","useEffect","styles","fetchStates","makeStyles","withStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","StateTable","country","fetchedState","setfetchedState","fetchAPI","console","log","StyledTableCell","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","StyledTableRow","root","action","hover","useStyles","table","minWidth","provinceData","classes","container","length","map","data","provinceState","confirmed","active","recovered","deaths"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,0BAAvC;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,SAAvB,EAAkCC,SAAlC,EAA6CC,cAA7C,EAA6DC,SAA7D,EAAwEC,QAAxE,QAAwF,mBAAxF;;AAEA,MAAMC,UAAU,GAAIC,OAAD,IAAa;AAE5B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,EAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMgB,QAAQ,GAAG,YAAY;AACzBD,MAAAA,eAAe,CAAC,MAAMb,WAAW,CAACW,OAAD,CAAlB,CAAf;AACH,KAFD;;AAGAG,IAAAA,QAAQ;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AACH,GANQ,EAMN,CAACD,OAAD,CANM,CAAT;AAQA,QAAMM,eAAe,GAAGf,UAAU,CAAEgB,KAAD,KAAY;AAAG;AAC9CC,IAAAA,IAAI,EAAE;AACFC,MAAAA,eAAe,EAAEF,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBC,KADpC;AAEFC,MAAAA,KAAK,EAAEN,KAAK,CAACG,OAAN,CAAcC,MAAd,CAAqBG;AAF1B,KADqC;AAK3CC,IAAAA,IAAI,EAAE;AACFC,MAAAA,QAAQ,EAAE;AADR;AALqC,GAAZ,CAAD,CAAV,CAQpBrB,SARoB,CAAxB;AAUA,QAAMsB,cAAc,GAAG1B,UAAU,CAAEgB,KAAD,KAAY;AAAG;AAC7CW,IAAAA,IAAI,EAAE;AACF,4BAAsB;AAClBT,QAAAA,eAAe,EAAEF,KAAK,CAACG,OAAN,CAAcS,MAAd,CAAqBC;AADpB;AADpB;AADoC,GAAZ,CAAD,CAAV,CAMnBtB,QANmB,CAAvB;AAQA,QAAMuB,SAAS,GAAG/B,UAAU,CAAC;AACzBgC,IAAAA,KAAK,EAAE;AACHC,MAAAA,QAAQ,EAAE;AADP;AADkB,GAAD,CAA5B;AAMA,QAAMC,YAAY,GAAGvB,YAArB;AACA,QAAMwB,OAAO,GAAGJ,SAAS,EAAzB;AACA,sBACI;AAAK,IAAA,SAAS,EAAEjC,MAAM,CAACsC,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,YAAY,CAACG,MAAb,GAAsB,CAAtB,gBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAwB3B,OAAO,CAACA,OAAhC,CADH,gBACoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAwBA,OAAO,CAACA,OAAhC,sBAFzD,EAGKwB,YAAY,CAACG,MAAb,GAAsB,CAAtB,gBACG,oBAAC,cAAD;AAAgB,IAAA,SAAS,EAAEnC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAEiC,OAAO,CAACH,KAA1B;AAAiC,IAAA,EAAE,EAAE,EAArC;AAAyC,IAAA,EAAE,EAAE,CAA7C;AAAgD,IAAA,YAAY,MAA5D;AAA6D,kBAAW,cAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,eAAD;AAAiB,IAAA,KAAK,EAAC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,oBAAC,eAAD;AAAiB,IAAA,KAAK,EAAC,MAAvB;AAA8B,IAAA,KAAK,EAAC,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ,eAGI,oBAAC,eAAD;AAAiB,IAAA,KAAK,EAAC,MAAvB;AAA8B,IAAA,KAAK,EAAC,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII,oBAAC,eAAD;AAAiB,IAAA,KAAK,EAAC,MAAvB;AAA8B,IAAA,KAAK,EAAC,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJJ,eAKI,oBAAC,eAAD;AAAiB,IAAA,KAAK,EAAC,MAAvB;AAA8B,IAAA,KAAK,EAAC,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,CADJ,CADJ,eAUI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKE,YAAY,CAACG,MAAb,GAAsB,CAAtB,GAA0BH,YAAY,CAACI,GAAb,CAAkBC,IAAD,iBACxC,oBAAC,cAAD;AAAgB,IAAA,GAAG,EAAEA,IAAI,CAACC,aAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAC,IAA3B;AAAgC,IAAA,KAAK,EAAC,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,IAAI,CAACC,aADV,CADJ,eAII,oBAAC,eAAD;AAAiB,IAAA,KAAK,EAAE;AAAEjB,MAAAA,KAAK,EAAE;AAAT,KAAxB;AAA6D,IAAA,KAAK,EAAC,MAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2EgB,IAAI,CAACE,SAAhF,CAJJ,eAKI,oBAAC,eAAD;AAAiB,IAAA,KAAK,EAAE;AAAElB,MAAAA,KAAK,EAAE;AAAT,KAAxB;AAA2D,IAAA,KAAK,EAAC,MAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyEgB,IAAI,CAACG,MAA9E,CALJ,eAMI,oBAAC,eAAD;AAAiB,IAAA,KAAK,EAAE;AAAEnB,MAAAA,KAAK,EAAE;AAAT,KAAxB;AAA2D,IAAA,KAAK,EAAC,MAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyEgB,IAAI,CAACI,SAA9E,CANJ,eAOI,oBAAC,eAAD;AAAiB,IAAA,KAAK,EAAE;AAAEpB,MAAAA,KAAK,EAAE;AAAT,KAAxB;AAA2D,IAAA,KAAK,EAAC,MAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyEgB,IAAI,CAACK,MAA9E,CAPJ,CADuB,CAA1B,GAUI,mDAXT,CAVJ,CADJ,CADH,GA2BG,IA9BR,CADJ;AAkCH,CAxED;;AA0EA,eAAenC,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './StateTable.module.css';\nimport { fetchStates } from '../../api';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\n\nconst StateTable = (country) => {\n\n    const [fetchedState, setfetchedState] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setfetchedState(await fetchStates(country));\n        }\n        fetchAPI();\n        console.log(fetchedState);\n    }, [country]);\n\n    const StyledTableCell = withStyles((theme) => ({  // table column\n        head: {\n            backgroundColor: theme.palette.common.black,\n            color: theme.palette.common.white,\n        },\n        body: {\n            fontSize: 14,\n        },\n    }))(TableCell);\n\n    const StyledTableRow = withStyles((theme) => ({  // table row\n        root: {\n            '&:nth-of-type(odd)': {\n                backgroundColor: theme.palette.action.hover,\n            },\n        },\n    }))(TableRow);\n\n    const useStyles = makeStyles({\n        table: {\n            minWidth: 100,\n        },\n    });\n\n    const provinceData = fetchedState;\n    const classes = useStyles();\n    return (\n        <div className={styles.container}>\n            {provinceData.length > 1 ? (\n                <h3>Statewise Data for {country.country}</h3>) : <h3>Statewise Data for {country.country} is not Available</h3>}\n            {provinceData.length > 1 ? (\n                <TableContainer component={Paper}>\n                    <Table className={classes.table} xs={12} md={3} stickyHeader aria-label=\"sticky table\">\n                        <TableHead>\n                            <TableRow>\n                                <StyledTableCell width=\"100\">States</StyledTableCell>\n                                <StyledTableCell align=\"left\" width=\"50\">Confirmed</StyledTableCell>\n                                <StyledTableCell align=\"left\" width=\"50\">Active</StyledTableCell>\n                                <StyledTableCell align=\"left\" width=\"50\">Recovered</StyledTableCell>\n                                <StyledTableCell align=\"left\" width=\"50\">Deaths</StyledTableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {provinceData.length > 1 ? provinceData.map((data) => (\n                                <StyledTableRow key={data.provinceState}>\n                                    <StyledTableCell component=\"th\" scope=\"row\">\n                                        {data.provinceState}\n                                    </StyledTableCell>\n                                    <StyledTableCell style={{ color: 'rgba(0, 139, 139, 0.8)' }} align=\"left\">{data.confirmed}</StyledTableCell>\n                                    <StyledTableCell style={{ color: 'rgba(0, 0, 255, 0.8)' }} align=\"left\">{data.active}</StyledTableCell>\n                                    <StyledTableCell style={{ color: 'rgba(0, 140, 0, 0.8)' }} align=\"left\">{data.recovered}</StyledTableCell>\n                                    <StyledTableCell style={{ color: 'rgba(255, 0, 0, 0.8)' }} align=\"left\">{data.deaths}</StyledTableCell>\n                                </StyledTableRow>\n                            )) : 'Statewise Data for this Country is not Available.'}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            ) : null}\n        </div>\n    );\n}\n\nexport default StateTable;"]},"metadata":{},"sourceType":"module"}